export class ResultAIAssistant {
  constructor() {
    this.slides = [];
    this.currentSlide = 0;
  }

  /**
   * Parses the raw AI-generated plan into an array of slides.
   * This is only used for the multi-section 'strategic_plan'.
   * @param {string} planContent - The raw markdown/XML string from the AI.
   */
  parseAndSetSlides(planContent) {
    if (!planContent) {
      this.slides = [];
      return;
    }
    const cleanContent = planContent.replace(/<\/?master_plan>/g, '').trim();
    const sectionTags = [
        'executive_summary', 'strategic_recommendations', 'phased_project_roadmap', 
        'team_and_resource_plan', 'budgetary_considerations', 'next_steps'
    ];
    const sectionRegex = new RegExp(
      `<(${sectionTags.join('|')})>([\\s\\S]*?)<\\/\\1>`, 'g'
    );
    const matches = [...cleanContent.matchAll(sectionRegex)];
    this.slides = matches.map(match => match[2].trim()).filter(Boolean);
    this.currentSlide = 0;
  }

  render(result) {
    if (!result.aiPlanStatus) return '';

    if (result.aiPlanStatus === 'error') {
      return this._renderError(result.aiGeneratedPlan);
    }
    if (result.aiPlanStatus === 'skipped') {
      return this._renderSkipped();
    }
    
    // **NEW**: Render different content based on the plan type
    if (result.aiPlanType === 'feasibility_explanation') {
      return this._renderFeasibilityExplanation(result.aiGeneratedPlan);
    }

    // Default to rendering the strategic plan
    return this._renderStrategicPlan(result.aiGeneratedPlan);
  }
  
  _renderError(message) {
    return `<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><strong>Error:</strong><p>${message}</p></div>`;
  }

  _renderSkipped() {
    return `<div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4" role="alert"><p>The AI-generated analysis was skipped because a project description was not provided. Please start over and fill in the description to use this feature.</p></div>`;
  }

  _renderFeasibilityExplanation(content) {
    return `
      <div class="bg-yellow-50 shadow-xl rounded-lg p-6 border-l-4 border-yellow-400">
        <h3 class="text-lg md:text-xl font-semibold text-yellow-900 mb-1 flex items-center">
          <span class="mr-3 text-2xl">üßê</span> AI-Generated Feasibility Explanation
        </h3>
        <p class="text-sm text-yellow-700 mb-4">Our AI has analyzed the project's high risk level and provides the following explanation and recommendations to improve feasibility.</p>
        <div class="prose prose-yellow max-w-none bg-white p-6 rounded-md border border-yellow-200">
          ${marked.parse(content || 'No explanation available.')}
        </div>
      </div>
    `;
  }

  _renderStrategicPlan(content) {
    this.parseAndSetSlides(content);
    if (this.slides.length === 0) {
      return `<div class="prose prose-blue max-w-none bg-gray-50 p-6 rounded-md border">${marked.parse(content || '')}</div>`;
    }
    return `
      <div class="bg-white shadow-xl rounded-lg p-6 border border-gray-200">
        <h3 class="text-lg md:text-xl font-semibold text-gray-800 mb-1 flex items-center">
          <span class="mr-3 text-2xl">ü§ñ</span> AI-Generated Strategic Plan
        </h3>
        <p class="text-sm text-gray-500 mb-4">The following plan was generated by an AI assistant. Use the arrows to navigate through the sections.</p>
        <div id="ai-plan-slideshow" class="relative">
          <div id="ai-plan-slides-container" class="bg-gray-50 p-6 rounded-md border prose prose-blue max-w-none h-[36rem] overflow-y-auto transition-opacity duration-300 ease-in-out">
            ${marked.parse(this.slides[0] || '')}
          </div>
          <div class="flex justify-between items-center mt-4">
              <button id="ai-plan-prev-btn" class="px-3 md:px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-800 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors rounded-lg flex items-center">
                  <svg class="h-5 w-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
                  Previous
              </button>
              <div id="ai-plan-counter" class="text-sm font-medium text-gray-600">
                  Section 1 of ${this.slides.length}
              </div>
              <button id="ai-plan-next-btn" class="px-3 md:px-4 py-2 text-sm font-medium bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center">
                  Next
                  <svg class="h-5 w-5 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
              </button>
          </div>
        </div>
      </div>
    `;
  }

  attachSlideshowEvents() {
    const slideshow = document.getElementById('ai-plan-slideshow');
    if (!slideshow) return;
    const prevBtn = document.getElementById('ai-plan-prev-btn');
    const nextBtn = document.getElementById('ai-plan-next-btn');
    prevBtn?.addEventListener('click', () => this._changeSlide(-1));
    nextBtn?.addEventListener('click', () => this._changeSlide(1));
    this._updateSlideshowControls();
  }

  _changeSlide(direction) {
    const newIndex = this.currentSlide + direction;
    if (newIndex >= 0 && newIndex < this.slides.length) {
      this.currentSlide = newIndex;
      this._renderCurrentSlide();
      this._updateSlideshowControls();
    }
  }

  _renderCurrentSlide() {
    const container = document.getElementById('ai-plan-slides-container');
    if (!container) return;
    container.style.opacity = '0';
    setTimeout(() => {
      container.innerHTML = marked.parse(this.slides[this.currentSlide] || '');
      container.scrollTop = 0;
      container.style.opacity = '1';
    }, 150);
  }

  _updateSlideshowControls() {
    const prevBtn = document.getElementById('ai-plan-prev-btn');
    const nextBtn = document.getElementById('ai-plan-next-btn');
    const counter = document.getElementById('ai-plan-counter');
    if (prevBtn) prevBtn.disabled = this.currentSlide === 0;
    if (nextBtn) nextBtn.disabled = this.currentSlide >= this.slides.length - 1;
    if (counter && this.slides.length > 0) {
      counter.textContent = `Section ${this.currentSlide + 1} of ${this.slides.length}`;
    }
  }
}