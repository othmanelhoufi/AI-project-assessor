export class ResultAIPlan {
  constructor() {
    this.aiPlanSlides = [];
    this.currentAiPlanSlide = 0;
  }

  /**
   * Parses the raw AI-generated plan into an array of slides.
   * This method is now more robust to handle mixed formatting from the AI.
   * @param {string} planContent - The raw markdown/XML string from the AI.
   */
  parseAndSetSlides(planContent) {
    if (!planContent) {
      this.aiPlanSlides = [];
      return;
    }

    // 1. Clean the raw content by removing the wrapper tags and trimming whitespace.
    const cleanContent = planContent.replace(/<\/?master_plan>/g, '').trim();

    // 2. Use a robust regex to find all sections, whether they are in XML tags or plain Markdown.
    // This looks for <section_tag>content</section_tag> OR ### markdown_content
    const sectionTags = [
        'executive_summary', 'strategic_recommendations', 'phased_project_roadmap', 
        'team_and_resource_plan', 'budgetary_considerations', 'next_steps'
    ];
    const sectionRegex = new RegExp(
      `<(${sectionTags.join('|')})>([\\s\\S]*?)<\\/\\1>|(###[\\s\\S]*?(?=(###\\s)|$))`, 'g'
    );
    
    const matches = [...cleanContent.matchAll(sectionRegex)];
    
    this.aiPlanSlides = matches.map(match => {
      // The content is either from the XML capture group (2) or the Markdown capture group (3)
      const content = match[2] || match[3];
      return content.trim();
    }).filter(slide => slide); // Filter out any accidentally captured empty slides

    this.currentAiPlanSlide = 0;
  }

  render(result) {
    if (!result.aiPlanStatus) return '';

    if (result.aiPlanStatus === 'error') {
      return `<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><strong>Error:</strong><p>${result.aiGeneratedPlan}</p></div>`;
    }
    if (result.aiPlanStatus === 'skipped') {
      return `<div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4" role="alert"><p>The AI plan was skipped because a project description was not provided. Please start over and fill in the description to use this feature.</p></div>`;
    }

    // Use the new centralized parsing method
    this.parseAndSetSlides(result.aiGeneratedPlan);

    if (this.aiPlanSlides.length === 0) {
      // If parsing fails, render the whole block as a fallback.
      return `<div class="prose prose-blue max-w-none bg-gray-50 p-6 rounded-md border">${marked.parse(result.aiGeneratedPlan || '')}</div>`;
    }

    return `
        <div class="bg-white shadow-xl rounded-lg p-6 border border-gray-200">
          <h3 class="text-xl font-semibold text-gray-800 mb-1 flex items-center">
            <span class="mr-3 text-2xl">ðŸ¤–</span> AI-Generated Strategic Plan
          </h3>
          <p class="text-sm text-gray-500 mb-4">The following plan was generated by an AI assistant. Use the arrows to navigate through the sections.</p>
          
          <div id="ai-plan-slideshow" class="relative">
            <div id="ai-plan-slides-container" class="bg-gray-50 p-6 rounded-md border prose prose-blue max-w-none h-[36rem] overflow-y-auto transition-opacity duration-300 ease-in-out">
              ${marked.parse(this.aiPlanSlides[0] || '')}
            </div>

            <div class="flex justify-between items-center mt-4">
                <button id="ai-plan-prev-btn" class="px-4 py-2 text-gray-600 hover:text-gray-800 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors rounded-lg flex items-center">
                    <svg class="h-5 w-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
                    Previous
                </button>
                <div id="ai-plan-counter" class="text-sm font-medium text-gray-600">
                    Section 1 of ${this.aiPlanSlides.length}
                </div>
                <button id="ai-plan-next-btn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center">
                    Next
                    <svg class="h-5 w-5 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
                </button>
            </div>
          </div>
        </div>
    `;
  }

  attachSlideshowEvents() {
    const slideshow = document.getElementById('ai-plan-slideshow');
    if (!slideshow) return;

    const prevBtn = document.getElementById('ai-plan-prev-btn');
    const nextBtn = document.getElementById('ai-plan-next-btn');

    prevBtn?.addEventListener('click', () => this._changeAiPlanSlide(-1));
    nextBtn?.addEventListener('click', () => this._changeAiPlanSlide(1));

    this._updateSlideshowControls(); // Set initial button states
  }

  _changeAiPlanSlide(direction) {
    const newIndex = this.currentAiPlanSlide + direction;
    if (newIndex >= 0 && newIndex < this.aiPlanSlides.length) {
      this.currentAiPlanSlide = newIndex;
      this._renderCurrentAiPlanSlide();
      this._updateSlideshowControls();
    }
  }

  _renderCurrentAiPlanSlide() {
    const container = document.getElementById('ai-plan-slides-container');
    if (!container) return;

    container.style.opacity = '0';

    setTimeout(() => {
      container.innerHTML = marked.parse(this.aiPlanSlides[this.currentAiPlanSlide] || '');
      container.scrollTop = 0;
      container.style.opacity = '1';
    }, 150);
  }

  _updateSlideshowControls() {
    const prevBtn = document.getElementById('ai-plan-prev-btn');
    const nextBtn = document.getElementById('ai-plan-next-btn');
    const counter = document.getElementById('ai-plan-counter');

    if (prevBtn) {
      prevBtn.disabled = this.currentAiPlanSlide === 0;
    }
    if (nextBtn) {
      nextBtn.disabled = this.currentAiPlanSlide >= this.aiPlanSlides.length - 1;
    }
    if (counter && this.aiPlanSlides.length > 0) {
      counter.textContent = `Section ${this.currentAiPlanSlide + 1} of ${this.aiPlanSlides.length}`;
    }
  }
}